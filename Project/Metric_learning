{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db4417bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import torchvision\n",
    "from torch.distributions import Normal as norm\n",
    "from termcolor import colored\n",
    "from sklearn.decomposition import PCA\n",
    "from scipy import linalg as LA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f3aba84e",
   "metadata": {},
   "outputs": [],
   "source": [
    "m = nn.Softmax(dim = 1)\n",
    "f = lambda x: torch.log(1e-20 + x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3caa2c06-6cad-458c-b5b0-33650bf24604",
   "metadata": {},
   "source": [
    "# Generating data points\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1b344a6",
   "metadata": {},
   "source": [
    "### 1. Randomly generate ground truth $\\mathbf{M}$\n",
    "\n",
    "We here generate a random ground truth $20\\times 20$ matrix $\\mathbf{M}$ whose first $5$ eigenvalues are $1,2,3,4,5$ and the rests are zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4d3b931",
   "metadata": {},
   "outputs": [],
   "source": [
    "def M_generator(d, S):\n",
    "    BB = torch.randn((d, d), dtype = torch.float64)\n",
    "    MM = BB @ BB.T\n",
    "    U_M, _, _ = LA.svd(MM.detach().numpy(), full_matrices=False)\n",
    "    return U_M @ np.diag(S) @ U_M.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "85e76990",
   "metadata": {},
   "outputs": [],
   "source": [
    "S = torch.tensor([1e-7 for i in range(20)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64ef227c",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(5):\n",
    "    S[i] = i+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "93b0862f",
   "metadata": {},
   "outputs": [],
   "source": [
    "M_t = M_generator(d = 20, S = S)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e630a6d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "_, s, _ = LA.svd(M_t, full_matrices=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38480e69",
   "metadata": {},
   "source": [
    "### Using standard Gussian distribution to generate data, what is the average $\\|\\cdot\\|^2_M$-norm of data points "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dcf70b98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " average squared Euclidean norm = 40.090501498429056\n",
      " average squared M-norm = 109.13133311695194\n"
     ]
    }
   ],
   "source": [
    "k_1 = 20\n",
    "counter = 0\n",
    "S = 0\n",
    "SS = 0\n",
    "for i in range(10000):\n",
    "    x = torch.randn((k_1,), dtype = torch.float64)\n",
    "    y = torch.randn((k_1,), dtype = torch.float64)\n",
    "    S += (x-y) @ M_t @ M_t.T @ (x-y)/10000\n",
    "    SS += (x-y) @ (x-y)/10000\n",
    "#     if (x-y) @ M_t @ M_t.T @ (x-y)<100:\n",
    "#         counter += 1\n",
    "print(\" average squared Euclidean norm = {}\\n average squared M-norm = {}\".format(SS.item(), S.item()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3d998db",
   "metadata": {},
   "source": [
    "### Set treshold $\\tau$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3e7b93e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([70.], dtype=torch.float64)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T = torch.tensor([70], dtype = torch.float64)\n",
    "T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "030bda0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ST(TT):\n",
    "    t = TT.shape[0]\n",
    "    T_ = torch.zeros(t + 1, dtype = torch.float64)\n",
    "    for i in range(1,t+1):\n",
    "        T_[i] = T_[i-1] + TT[i-1]\n",
    "    return T_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f94b5e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0., 70.], dtype=torch.float64)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ST(T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8ff29aac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prob(x, TT):\n",
    "    N = TT.shape[0]+1\n",
    "    T_ = ST(TT)\n",
    "    W = x.reshape(-1,1) * torch.tensor([i for i in range(1,N+1)], dtype = torch.float64).reshape(1,-1) - T_.reshape(1,-1)\n",
    "    return m(W)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5689d795",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_generator(n, k, d, n_train, T, M, noise = 0.05, random_labeling = True):\n",
    "\n",
    "    X = torch.zeros((n, k), dtype = torch.float64)\n",
    "    Y = torch.zeros((n, k), dtype = torch.float64)\n",
    "    D = torch.zeros(n, dtype = torch.int64)\n",
    "    D_no_noise = torch.zeros(n, dtype = torch.int64)\n",
    "    c = 0\n",
    "    ones = torch.ones(len(T)+1, dtype = torch.float64)\n",
    "    \n",
    "    while True:\n",
    "        x = torch.randn((k,), dtype = torch.float64)\n",
    "        y = torch.randn((k,), dtype = torch.float64)\n",
    "        norm_2_M = (x-y) @ M @ M.T @ (x-y)\n",
    "        \n",
    "        \n",
    "        weights = prob(norm_2_M, T).reshape(-1)\n",
    "        if random_labeling:\n",
    "            label = torch.multinomial(weights, 1).item()\n",
    "        else:\n",
    "            label = torch.argmax(weights).item()\n",
    "                  \n",
    "        D_no_noise[c] = label\n",
    "        X[c] = x\n",
    "        Y[c] = y\n",
    "        if np.random.uniform() > noise:\n",
    "            D[c] = label\n",
    "        else:\n",
    "            D[c] = torch.multinomial(ones, 1).item()\n",
    "        c+= 1\n",
    "            \n",
    "        if c == n:\n",
    "            return train_test_split(X, Y, D, D_no_noise, n_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ed80c20e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_test_split(X, Y, D, D_no_noise, n_train):\n",
    "    n, k = X.shape\n",
    "    \n",
    "    X_T, Y_T, D_T = X[:n_train], Y[:n_train], D[:n_train]\n",
    "    X_test, Y_test, D_test = X[n_train:], Y[n_train:], D[n_train:]\n",
    "    D_no_noise_test = D_no_noise[n_train:]\n",
    "    D_no_noise_T = D_no_noise[:n_train]\n",
    "    \n",
    "    return X, Y, D, X_T, Y_T, D_T, D_no_noise_T, X_test, Y_test, D_test, D_no_noise_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "281d8fb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def M_distance (X, Y, A):\n",
    "    return ((X - Y) @ A).square().sum(axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6b125e60",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pred(x, y, B, T):\n",
    "    dis = ((x - y) @ B).square().sum(axis = 1)\n",
    "    N = T.shape[0]+1\n",
    "    T_ = ST(T)\n",
    "    W = dis.reshape(-1,1) * torch.tensor([i for i in range(1,N+1)], \n",
    "                                         dtype = torch.float64).reshape(1,-1) - T_.reshape(1,-1)\n",
    "    return torch.argmax(W, dim=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e593dc93",
   "metadata": {},
   "outputs": [],
   "source": [
    "def loss(X, Y, L, B, Tau):\n",
    "    S = ((X - Y) @ B).square().sum(axis = 1)\n",
    "    P = prob(S, Tau)\n",
    "    Scores = -torch.log(1e-30 + P[range(P.shape[0]), L]) #- Tau[Tau<0].sum()\n",
    "    return Scores.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "508a5cec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(X, Y, L, d, k, learning_rate = 5e-1, n_iters = 30000, decay = 1, l = 7):\n",
    "    \n",
    "    train_acc_history_noisy = []\n",
    "    train_acc_history = []\n",
    "    test_acc_history_noisy = []\n",
    "    test_acc_history = []\n",
    "    \n",
    "    X = X.requires_grad_(False)\n",
    "    Y = Y.requires_grad_(False)\n",
    "    L = L.requires_grad_(False)\n",
    "    \n",
    "    B = (1e-6 * torch.randn((k,d), dtype = torch.float64)).clone().detach().requires_grad_(True)\n",
    "    # Tau  = (1e-5 * torch.arange(7, dtype = torch.float64)).clone().detach().requires_grad_(True)\n",
    "    Tau  = (1e-5 * torch.zeros(len(T), dtype = torch.float64)).clone().detach().requires_grad_(True)\n",
    "    \n",
    "    for epoch in range(n_iters):\n",
    "        l = loss(X, Y, L, B, Tau)\n",
    "        # calculate gradients = backward pass\n",
    "        l.backward()\n",
    "\n",
    "        # update weights\n",
    "        with torch.no_grad():\n",
    "            B -= learning_rate * B.grad\n",
    "            Tau -= learning_rate * Tau.grad\n",
    "            \n",
    "            \n",
    "        # zero the gradients after updating\n",
    "        \n",
    "        if epoch % 500 == 0:\n",
    "            print(f'epoch {epoch+1}:\\n norm of M.grad = {B.grad.square().sum()},\\n loss = {l.item()}')\n",
    "            print(Tau)\n",
    "            with torch.no_grad():\n",
    "                \n",
    "                Pred_T = pred(X_T, Y_T, B, Tau)\n",
    "                e = (Pred_T == D_T).sum()/D_T.shape[0]\n",
    "                train_acc_history_noisy.append(e)\n",
    "                \n",
    "                P = pred(X_T, Y_T, B, Tau)\n",
    "                e = (P == D_no_noise_T).sum()/D_no_noise_T.shape[0]\n",
    "                train_acc_history.append(e)\n",
    "                \n",
    "                P = pred(X_test, Y_test, B, Tau)\n",
    "                e = (P == D_test).sum()/D_test.shape[0]\n",
    "                test_acc_history_noisy.append(e)\n",
    "                \n",
    "                P = pred(X_test, Y_test, B, Tau)\n",
    "                e = (P == D_no_noise_test).sum()/D_no_noise_test.shape[0]\n",
    "                test_acc_history.append(e)\n",
    "\n",
    "                learning_rate *= decay\n",
    "        \n",
    "        B.grad.zero_()\n",
    "        Tau.grad.zero_()\n",
    "    return B, Tau, train_acc_history_noisy, train_acc_history, test_acc_history_noisy, test_acc_history"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f3d3039",
   "metadata": {},
   "source": [
    "### d = 20, noise = 0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a20ccb10",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, Y, D, X_T, Y_T, D_T, D_no_noise_T, X_test, Y_test, D_test, D_no_noise_test = data_generator(n = 50000, \n",
    "                                                                                               k = 20, \n",
    "                                                                                               d = 20, \n",
    "                                                                                               n_train = 45000, \n",
    "                                                                                               T = T, \n",
    "                                                                                               M = M_t,\n",
    "                                                                                               random_labeling = False, \n",
    "                                                                                               noise = 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "49a7dde2-7d58-46d5-b497-49fd2763a133",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1:\n",
      " M = 1.3401961966086953e-10,\n",
      " loss = 0.6931471804645638\n",
      "tensor([-0.0044], dtype=torch.float64, requires_grad=True)\n",
      "epoch 501:\n",
      " M = 0.0005202668687958235,\n",
      " loss = 0.43407791282519254\n",
      "tensor([0.9823], dtype=torch.float64, requires_grad=True)\n",
      "epoch 1001:\n",
      " M = 0.000532333834910922,\n",
      " loss = 0.3792799502579153\n",
      "tensor([2.0398], dtype=torch.float64, requires_grad=True)\n",
      "epoch 1501:\n",
      " M = 1.8302494821029463e-05,\n",
      " loss = 0.35755480634816506\n",
      "tensor([2.6247], dtype=torch.float64, requires_grad=True)\n",
      "epoch 2001:\n",
      " M = 6.194036109363872e-06,\n",
      " loss = 0.35198261617333043\n",
      "tensor([2.9711], dtype=torch.float64, requires_grad=True)\n",
      "epoch 2501:\n",
      " M = 2.477070946338826e-06,\n",
      " loss = 0.3498500864915216\n",
      "tensor([3.1841], dtype=torch.float64, requires_grad=True)\n",
      "epoch 3001:\n",
      " M = 1.0924257796796676e-06,\n",
      " loss = 0.34894134509776564\n",
      "tensor([3.3220], dtype=torch.float64, requires_grad=True)\n",
      "epoch 3501:\n",
      " M = 5.136119408370831e-07,\n",
      " loss = 0.3485268575502796\n",
      "tensor([3.4144], dtype=torch.float64, requires_grad=True)\n",
      "epoch 4001:\n",
      " M = 2.529841394119219e-07,\n",
      " loss = 0.34832870812557654\n",
      "tensor([3.4777], dtype=torch.float64, requires_grad=True)\n",
      "epoch 4501:\n",
      " M = 1.4271009350473834e-07,\n",
      " loss = 0.34823055172428896\n",
      "tensor([3.5218], dtype=torch.float64, requires_grad=True)\n",
      "epoch 5001:\n",
      " M = 6.214760166411959e-07,\n",
      " loss = 0.3481776304434541\n",
      "tensor([3.5529], dtype=torch.float64, requires_grad=True)\n",
      "epoch 5501:\n",
      " M = 1.825633007180319e-05,\n",
      " loss = 0.34804576026070805\n",
      "tensor([3.5757], dtype=torch.float64, requires_grad=True)\n",
      "epoch 6001:\n",
      " M = 3.035811772082921e-05,\n",
      " loss = 0.3471592776888258\n",
      "tensor([3.6013], dtype=torch.float64, requires_grad=True)\n",
      "epoch 6501:\n",
      " M = 2.7016075075247246e-07,\n",
      " loss = 0.3469681227042472\n",
      "tensor([3.6354], dtype=torch.float64, requires_grad=True)\n",
      "epoch 7001:\n",
      " M = 7.332702353881056e-08,\n",
      " loss = 0.34692541810223015\n",
      "tensor([3.6629], dtype=torch.float64, requires_grad=True)\n",
      "epoch 7501:\n",
      " M = 4.188174224412499e-08,\n",
      " loss = 0.3469008100041681\n",
      "tensor([3.6837], dtype=torch.float64, requires_grad=True)\n",
      "epoch 8001:\n",
      " M = 2.5081859243282024e-08,\n",
      " loss = 0.3468863197254039\n",
      "tensor([3.6995], dtype=torch.float64, requires_grad=True)\n",
      "epoch 8501:\n",
      " M = 1.5297184797981796e-08,\n",
      " loss = 0.3468776690237833\n",
      "tensor([3.7116], dtype=torch.float64, requires_grad=True)\n",
      "epoch 9001:\n",
      " M = 9.460086153559678e-09,\n",
      " loss = 0.34687243992440325\n",
      "tensor([3.7209], dtype=torch.float64, requires_grad=True)\n",
      "epoch 9501:\n",
      " M = 5.922214402781122e-09,\n",
      " loss = 0.34686924241014\n",
      "tensor([3.7281], dtype=torch.float64, requires_grad=True)\n",
      "epoch 10001:\n",
      " M = 3.749433786169077e-09,\n",
      " loss = 0.34686726585762373\n",
      "tensor([3.7337], dtype=torch.float64, requires_grad=True)\n"
     ]
    }
   ],
   "source": [
    "A, T, train_acc_noisy, train_acc, test_acc_noisy, test_acc = train(X_T, \n",
    "                                                                   Y_T, \n",
    "                                                                   D_T, \n",
    "                                                                   d = 20, \n",
    "                                                                   k = 20, \n",
    "                                                                   learning_rate = 5e-2, \n",
    "                                                                   n_iters = 10001, \n",
    "                                                                   decay = .98)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fd583036",
   "metadata": {},
   "outputs": [],
   "source": [
    "I = [i for i in range(0,10001, +500)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b554e963",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_acc_noisy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "641df465",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(I)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5d432bdb-2a9e-4605-a169-c3c4dddb2fb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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mJqayqZNmxg6dCj//ve/ERE+++wz7rzzTpxOJ6eccgrPPfcckZGRjBo1ikcffZTBgwfzu9/9jqysLESEG264gfHjxwdk87p167jhhhuIiYlhxIgR3vicnBy/7TNr1ix++uknMjMzuf7665kwYUK97RjqhLS7BGdBEcVxoByJpCVFBdscTQDMnTuX3r17k52dzfz58wFYs2YNDz/8sHcIYOHChaxbt46srCyefPJJCgsL6+xn69at3Hbbbfz4448kJSXxn//8x+/xUlNT+f7775k+fTqPPvooALNnz+bcc8/l+++/Z8KECezatctv2YcffpisrCw2bNjAl19+yYYNG6iurubKK6/kiSeeYP369Xz66adER0fz/PPPs2PHDn744Qc2bNjApEmTGm2LdevW8e677/Lqq6/SqVMnPvnkE77//nveeOMN7rjjDgA+/PBD3nnnHb777jvWr1/Pn/70J3r37k1iYiLZ2dkALFq0iClTptTZ/+TJk/nb3/7Ghg0bGDhwoLezAuNuYs2aNTz++OM14n354YcfePzxx9m8eTPbt2/n66+/prKykilTpvDGG2+wceNGnE4nzz33XI1y2dnZ7Nmzh02bNrFx40amTp0asM1Tp07lySef5Ntvv60RX1/7zJ07l5EjR5Kdnc0f/vCHevOFAyF7Za+UwlF0mP1dLTgdHeiqF1QdNQ1dgR9Lhg8fXmNO8ZNPPsnSpUsB2L17N1u3bqVDh5p3br169SIzMxOAoUOHkpOT43ffv/3tb715/vvf/wKwevVq7/7Hjh1LcnKy37Jvvvkmzz//PE6nk3379rF582ZEhLS0NE455RQAEhISAPj000+ZNm2adzgmJSWl0XqPHz+e6Gjjd+twOJgxYwbZ2dlYrVZ++eUX736nTp1KTExMjf3eeOONLFq0iH/84x+88cYbrFmzpsa+Dx48SElJCWeffTYA119/PZdffrnfdqmv7YYPH0737oa/qczMTHJycoiPj6dXr16ceOKJ3v0+88wz/N///Z+33PHHH8/27du5/fbbufDCCxkzZkyTbL7uuuv48MMPG2yf2gSaLxQJWbF3Hz6MqnaRm2jBTgrREfWP9WraNrGxsd7wypUr+fTTT/n222+JiYlh1KhRfuccR0ZGesNWq5WKigq/+/bks1qtOJ1OwLhQaIwdO3bw6KOPsnbtWpKTk5kyZQqV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KM888wzZ2dl89dVXREdHs2LFCrZu3cqaNWvIzs5m3bp13g6uuTS6qEpErMAzwGiMF4ivFZFlSqnNPnmSgGeBsUqpXSJS2/PYOUqpupdGrYRz7y5cVoXDbqNnPe5pNQEwbm6wLQC0i2Noey6OV61axdVXX43VaqVr166ce+653rQvvviCefPmUV5eTlFREf379+fiiy+us49A8o0cOZJVq1axY8cO7r77bl544QXOPvtsb/s2Rmu6am7oGKtXr+b2228HDOdwxx13XB13ymeeeSZ//OMfmTRpEr/97W/p3r07K1asYMWKFQwePBiA0tJStm7dyllnnRVQfRsikCv74cA2pdR2pVQ18DpwSa081wD/VUrtAlBKHSCIOPfs4nAcRDjj6KpfWtLuqc/F8fr16xk8eHBALo4bc9PbVBfHn332GRs2bODCCy88Zi6Os7KyqK6ubnC/l112GR9++CHvv/9+q7k49nfcyspKbr31Vt5++202btzITTfd5Pf8BJpv5MiRfPXVV6xZs8b7AH7lypUBi19rumpu6BiBlJ81axYvvvgiFRUVnHbaaWzZsgWlFHfffTfZ2dlkZ2ezbds2fve73wVsS0MEIvbdgN0+27lmnC8nAskislJE1onIZJ80Baww42+u7yAicrOIZIlIVr45m6apOPbnURwPOBJI0wuq2hXaxbF/2pqL47POOovXX38dl8vFvn37vGPSHsFOTU2ltLS0xgwd33PbUD5fTj31VL755hssFgtRUVFkZmbyz3/+s85rEmvvv7kE4qq5Ic466yyvC+ZffvmFXbt2cdJJJ9XI8+uvvzJw4EDuuusuhg0bxpYtWzj//PNZuHAhpaWlgOEh1Pd5SHMIROz9vS2gdrdlA4YCFwLnA/eKyIlm2plKqSHAOOA2EfHbJSulnldKDVNKDevYsXnTJZ35heQlCA5nKp3i9YKq9oR2ceyftubieMKECfTp04eBAwcyffp0rxAmJSVx0003MXDgQC699NIawy1Tpkxh2rRpZGZmEhkZWW8+XyIjI+nRo4f3PI8cOZLDhw97H9b7ctVVVzF//nwGDx7sfUDbVAJx1dwQt956Ky6Xi4EDB3LllVeyePHiGncQAI8//jgDBgxg0KBBREdHM27cOMaMGcM111zD6aefzsCBA5k4cWKLdWCNujgWkdOBB5RS55vbdwMopf7qk2cW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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(I, train_acc_noisy, label = 'training accuracy on noisy data')\n",
    "plt.plot(I, train_acc, label = 'training accuracy on data with no noise')\n",
    "plt.plot(I, test_acc_noisy, label = 'test accuracy on noisy test data')\n",
    "plt.plot(I, test_acc, label = 'test accuracy test data with no noise')\n",
    "plt.title(\"accuracy vs #iterations\", color='black') \n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f868eecf",
   "metadata": {},
   "source": [
    "### d = 50, noise = 0.05\n",
    "Only the fisrt 10 eigenvalue of $M$ are nonzero which are $[2,4,\\ldots,20]$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4f87116a",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = torch.tensor([0 for i in range(50)])\n",
    "for i in range(10):\n",
    "    s[i] = 2*(i+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9786eb98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cfaa1690-85a4-46f5-b894-9b8059761e3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "M_t = M_generator(d = 50, S = s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d916ccf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " average squared Euclidean norm = 99.94501986996677\n",
      " average squared M-norm = 3087.243980573904\n"
     ]
    }
   ],
   "source": [
    "k_1 = 50\n",
    "counter = 0\n",
    "S = 0\n",
    "SS = 0\n",
    "for i in range(10000):\n",
    "    x = torch.randn((k_1,), dtype = torch.float64)\n",
    "    y = torch.randn((k_1,), dtype = torch.float64)\n",
    "    S += (x-y) @ M_t @ M_t.T @ (x-y)/10000\n",
    "    SS += (x-y) @ (x-y)/10000\n",
    "#     if (x-y) @ M_t @ M_t.T @ (x-y)<100:\n",
    "#         counter += 1\n",
    "print(\" average squared Euclidean norm = {}\\n average squared M-norm = {}\".format(SS.item(), S.item()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "13b2f2c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([2800.], dtype=torch.float64)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T = torch.tensor([2800], dtype = torch.float64)\n",
    "T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a1659b85",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, Y, D, X_T, Y_T, D_T, D_no_noise_T, X_test, Y_test, D_test, D_no_noise_test = data_generator(n = 50000, \n",
    "                                                                                               k = 50, \n",
    "                                                                                               d = 50, \n",
    "                                                                                               n_train = 45000, \n",
    "                                                                                               T = T, \n",
    "                                                                                               M = M_t,\n",
    "                                                                                               random_labeling = False, \n",
    "                                                                                               noise = 0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f7ce171f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1:\n",
      " M = 1.9420617174420193e-10,\n",
      " loss = 0.6931471805552439\n",
      "tensor([0.0007], dtype=torch.float64, requires_grad=True)\n",
      "epoch 501:\n",
      " M = 0.0042912355207793676,\n",
      " loss = 0.5430829086010046\n",
      "tensor([0.5734], dtype=torch.float64, requires_grad=True)\n",
      "epoch 1001:\n",
      " M = 0.0005726560956460695,\n",
      " loss = 0.40704665580524485\n",
      "tensor([1.8120], dtype=torch.float64, requires_grad=True)\n",
      "epoch 1501:\n",
      " M = 0.00010846310875073801,\n",
      " loss = 0.34836683909615196\n",
      "tensor([2.6380], dtype=torch.float64, requires_grad=True)\n",
      "epoch 2001:\n",
      " M = 0.00022483512432093256,\n",
      " loss = 0.321777010067731\n",
      "tensor([3.2260], dtype=torch.float64, requires_grad=True)\n",
      "epoch 2501:\n",
      " M = 4.9577524568217385e-05,\n",
      " loss = 0.2986574307634664\n",
      "tensor([3.6972], dtype=torch.float64, requires_grad=True)\n",
      "epoch 3001:\n",
      " M = 2.2903612872937158e-05,\n",
      " loss = 0.28630676851306314\n",
      "tensor([4.0949], dtype=torch.float64, requires_grad=True)\n",
      "epoch 3501:\n",
      " M = 1.797960488122011e-05,\n",
      " loss = 0.2778330747259176\n",
      "tensor([4.4216], dtype=torch.float64, requires_grad=True)\n",
      "epoch 4001:\n",
      " M = 0.00019546182566516478,\n",
      " loss = 0.2711204732083269\n",
      "tensor([4.6975], dtype=torch.float64, requires_grad=True)\n",
      "epoch 4501:\n",
      " M = 4.947905767397181e-05,\n",
      " loss = 0.2625422542685271\n",
      "tensor([4.9492], dtype=torch.float64, requires_grad=True)\n",
      "epoch 5001:\n",
      " M = 8.265366395120005e-06,\n",
      " loss = 0.2579653658111701\n",
      "tensor([5.1811], dtype=torch.float64, requires_grad=True)\n",
      "epoch 5501:\n",
      " M = 6.4522502573167974e-06,\n",
      " loss = 0.25436580101570716\n",
      "tensor([5.3864], dtype=torch.float64, requires_grad=True)\n",
      "epoch 6001:\n",
      " M = 5.2112569707654585e-06,\n",
      " loss = 0.25144682768143783\n",
      "tensor([5.5695], dtype=torch.float64, requires_grad=True)\n",
      "epoch 6501:\n",
      " M = 4.290188255080638e-06,\n",
      " loss = 0.24904213953838003\n",
      "tensor([5.7340], dtype=torch.float64, requires_grad=True)\n",
      "epoch 7001:\n",
      " M = 3.5877690248458294e-06,\n",
      " loss = 0.24703466935027654\n",
      "tensor([5.8830], dtype=torch.float64, requires_grad=True)\n",
      "epoch 7501:\n",
      " M = 3.040632476738605e-06,\n",
      " loss = 0.24533969125211516\n",
      "tensor([6.0185], dtype=torch.float64, requires_grad=True)\n",
      "epoch 8001:\n",
      " M = 2.6072480887010593e-06,\n",
      " loss = 0.2438944444263091\n",
      "tensor([6.1423], dtype=torch.float64, requires_grad=True)\n",
      "epoch 8501:\n",
      " M = 2.2624075631659695e-06,\n",
      " loss = 0.2426514879163696\n",
      "tensor([6.2561], dtype=torch.float64, requires_grad=True)\n",
      "epoch 9001:\n",
      " M = 2.01135618706769e-06,\n",
      " loss = 0.2415742260179264\n",
      "tensor([6.3610], dtype=torch.float64, requires_grad=True)\n",
      "epoch 9501:\n",
      " M = 2.020329914101737e-06,\n",
      " loss = 0.24063323824747979\n",
      "tensor([6.4580], dtype=torch.float64, requires_grad=True)\n",
      "epoch 10001:\n",
      " M = 3.5365832517042144e-06,\n",
      " loss = 0.2397993840711058\n",
      "tensor([6.5479], dtype=torch.float64, requires_grad=True)\n"
     ]
    }
   ],
   "source": [
    "A, T, train_acc_noisy, train_acc, test_acc_noisy, test_acc = train(X_T, \n",
    "                                                                   Y_T, \n",
    "                                                                   D_T, \n",
    "                                                                   d = 50, \n",
    "                                                                   k = 50, \n",
    "                                                                   learning_rate = 3e-2, \n",
    "                                                                   n_iters = 10001, \n",
    "                                                                   decay = .98)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "cc06addf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(I, train_acc_noisy, label = 'training accuracy on noisy data')\n",
    "plt.plot(I, train_acc, label = 'training accuracy on data with no noise')\n",
    "plt.plot(I, test_acc_noisy, label = 'test accuracy on noisy test data')\n",
    "plt.plot(I, test_acc, label = 'test accuracy test data with no noise')\n",
    "plt.title(\"accuracy vs #iterations\", color='black') \n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aac23e42",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
